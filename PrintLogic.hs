{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintLogic where

-- pretty-printer generated by the BNF converter

import AbsLogic
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)




instance Print Exp where
  prt i e = case e of
    EImp exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "=>"), prt 1 exp2])
    EEq exp1 exp2 -> prPrec i 0 (concatD [prt 0 exp1, doc (showString "<=>"), prt 1 exp2])
    EAnd exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "^"), prt 2 exp2])
    EOr exp1 exp2 -> prPrec i 1 (concatD [prt 1 exp1, doc (showString "v"), prt 2 exp2])
    ENot exp -> prPrec i 2 (concatD [doc (showString "~"), prt 3 exp])
    EVar_a -> prPrec i 3 (concatD [doc (showString "a")])
    EVar_b -> prPrec i 3 (concatD [doc (showString "b")])
    EVar_c -> prPrec i 3 (concatD [doc (showString "c")])
    EVar_d -> prPrec i 3 (concatD [doc (showString "d")])
    EVar_e -> prPrec i 3 (concatD [doc (showString "e")])
    EVar_f -> prPrec i 3 (concatD [doc (showString "f")])
    EVar_g -> prPrec i 3 (concatD [doc (showString "g")])
    EVar_h -> prPrec i 3 (concatD [doc (showString "h")])
    EVar_i -> prPrec i 3 (concatD [doc (showString "i")])
    EVar_j -> prPrec i 3 (concatD [doc (showString "j")])
    EVar_k -> prPrec i 3 (concatD [doc (showString "k")])
    EVar_l -> prPrec i 3 (concatD [doc (showString "l")])
    EVar_m -> prPrec i 3 (concatD [doc (showString "m")])
    EVar_n -> prPrec i 3 (concatD [doc (showString "n")])
    EVar_o -> prPrec i 3 (concatD [doc (showString "o")])
    EVar_p -> prPrec i 3 (concatD [doc (showString "p")])
    EVar_r -> prPrec i 3 (concatD [doc (showString "r")])
    EVar_s -> prPrec i 3 (concatD [doc (showString "s")])
    EVar_t -> prPrec i 3 (concatD [doc (showString "t")])
    EVar_u -> prPrec i 3 (concatD [doc (showString "u")])
    EVar_w -> prPrec i 3 (concatD [doc (showString "w")])
    EVar_y -> prPrec i 3 (concatD [doc (showString "y")])
    EVar_z -> prPrec i 3 (concatD [doc (showString "z")])
    EVar_x -> prPrec i 3 (concatD [doc (showString "x")])


